#!/bin/bash

LOCALE="de_DE.UTF-8" # Format: "de_DE.UTF-8"
LOCALE_NODOT=$(echo $LOCALE | cut -d "." -f 1) # Format: "de_DE"
KEYBOARD="de" # Format: "de"
TIMEZONE="Europe/Berlin" # Format: "Europe/Berlin"
USERNAME="me" # Format: "me"
HOSTNAME="host" # Format: "host"

HERE=$(dirname $(readlink -f $0))

. "$HERE"/detect_debian_live.sh || exit 1
. "$HERE"/detect_arch.sh || exit 1
. "$HERE"/detect_casper.sh || exit 1
. "$HERE"/detect_dracut.sh || exit 1
. "$HERE"/detect_tumbleweed.sh || exit 1

if [[ $EUID -ne 0 ]]; then
  echo "You must be a root user" 2>&1
  exit 1
fi

function finish {
  umount /opt 2>/dev/null
  gsettings set org.gnome.desktop.media-handling automount 'true' 2>/dev/null
}
trap finish EXIT 

# Temporarily disable GNOME automount
# also for Unity in Ubuntu 11.04 and later
gsettings set org.gnome.desktop.media-handling automount 'false' 2>/dev/null

cat > /tmp/grub.cfg <<EOF
insmod part_msdos
menuentry "Old" {
	configfile /boot/grub/grub.cfg.old
}

EOF

LIVEMNT=$(df -P "$HERE" | awk 'END{print $NF}') # mountpoint
LIVE=$( cat /proc/mounts  | grep "$LIVEMNT" | cut -d " " -f 1 | head -n 1) # /dev/sdXX

mount "$LIVE" -o remount,rw
UUID=$(blkid "$LIVE" -s UUID -o value)
echo $UUID
ISOS=$(find "$LIVEMNT"/boot/iso -name "*.iso")

for ISO in $ISOS; do
  echo $ISO
  unset LIVETOOL
  unset LIVETOOLVERSION
  unset LINUX
  unset INITRD
  unset APPEND
  mount "$ISO" /opt -oloop,ro
  ISONAME=$(basename "$ISO")

  detect_debian_live "/opt" >/dev/null
  detect_arch "/opt" >/dev/null
  detect_casper "/opt" >/dev/null
  detect_dracut "/opt" >/dev/null
  detect_kiwi "/opt" >/dev/null
  
  sleep 0.1
  umount /opt

  echo ""

  echo ISONAME="$ISONAME"
  echo LIVETOOL="$LIVETOOL"
  echo LIVETOOLVERSION="$LIVETOOLVERSION"
  echo LINUX="$LINUX"
  echo INITRD="$INITRD"
  echo APPEND="$APPEND"
  # echo "$GRUBENTRY"
  [[ -z $LIVETOOL || -z $LIVETOOLVERSION || -z $LINUX || -z $INITRD || -z $APPEND || -z $GRUBENTRY ]] && continue
  ISONAME=$(basename "$ISO")
  echo "Writing boot entry"
  echo "$GRUBENTRY" >> /tmp/grub.cfg
  echo "" >> /tmp/grub.cfg
done

# For Ubuntu
grub-script-check /tmp/grub.cfg && (
# Backup the previous version
cp "$LIVEMNT"/boot/grub/grub.cfg "$LIVEMNT"/boot/grub/grub.cfg.old
cp /tmp/grub.cfg "$LIVEMNT"/boot/grub/grub.cfg
echo "Successfully updated bootloader configuration"
)

# For openSUSE
grub2-script-check /tmp/grub.cfg && (
# Backup the previous version
cp "$LIVEMNT"/boot/grub/grub.cfg "$LIVEMNT"/boot/grub/grub.cfg.old
cp /tmp/grub.cfg "$LIVEMNT"/boot/grub/grub.cfg
echo "Successfully updated bootloader configuration"
)
